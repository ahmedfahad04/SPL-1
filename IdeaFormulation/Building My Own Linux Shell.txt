### Challenges:
1. I'll have to provide command's executable file which I can't built right now.
(For example: ls -l; list of all the file name along with their read,write,execute
permission. Here what that command does is not defined in my code, rather it's 
defined.)




### Procedure:
1. REPL (Read-Eval/Execute-Print-Loop)
2. Parsing and Executing Commands
3. Symbol table




### What I want:
1. All the commands will be renamed by me. (also user can customize the commands as they like)




### What I'll implement:
* AST
* Hash Table/Linked list/Binary search tree
* Types of prompt (https://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html)




### What I need to KNOW:
* Shell builtins (https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html)
* Simple commands (https://www.gnu.org/software/bash/manual/html_node/Simple-Commands.html)
* Basic Shell Features (https://www.gnu.org/software/bash/manual/html_node/Basic-Shell-Features.html)
* Interactive and non interactive shell (https://www.gnu.org/software/bash/manual/html_node/What-is-an-Interactive-Shell_003f.html)
*** Shell operation (https://www.gnu.org/software/bash/manual/html_node/Shell-Operation.html)




























### Why I need it?

As most GNU/Linux shells are open-sourced, if you want to learn the inner workings of the shell, 
you can search online for the source code and start digging in (that's what I actually did). 
But this advice is actually easier said than done. For example, where exactly should you start 
reading the code from? Which source files contain the code that implements I/O redirection? 
Where can I find the code that parses user commands? I guess you got the point.

This is why I’ve decided to write this tutorial, to help Linux users and programmers gain a 
better understanding of their shells. Together, we are going to implement a fully functional 
Linux shell, from scratch. Along the way, we'll see how a Linux shell manages to parse and 
execute commands, loops, and conditional expressions by actually writing the C code that 
does the above tasks. We’ll talk about word expansions and I/O redirection, and we’ll see 
the code that performs features.

Personally I feel the importance of using linux shell while using the windows. So I thought if we
can run linux terminal (shell) in windows, that would be great beneficial for increasing our productivity.



### Resource:
1. https://hackernoon.com/lets-build-a-linux-shell-part-i-bz3n3vg1
2. https://hackernoon.com/building-a-linux-shell-part-ii-a-step-by-step-guide-pk203ywg
3. https://hackernoon.com/building-a-linux-shell-part-iii-wzo3uoi
4. https://hackernoon.com/building-a-linux-shell-part-iv-h21o3uwl
5. https://hackernoon.com/building-a-linux-shell-part-v-k61a3uai
6. https://brennan.io/2015/01/16/write-a-shell-in-c/
7. ANSI Escape codes https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797
